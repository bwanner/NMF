//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace NMF.Models.Meta
{
    
    
    /// <summary>
    /// Represents a group of instances with common properties like attributes or references
    /// </summary>
    [XmlNamespaceAttribute("http://nmf.codeplex.com/nmeta/")]
    [XmlNamespacePrefixAttribute("nmeta")]
    [ModelRepresentationClassAttribute("http://nmf.codeplex.com/nmeta/#//Class/")]
    [DebuggerDisplayAttribute("Class {Name}")]
    public class Class : ReferenceType, IClass, IModelElement
    {
        
        /// <summary>
        /// The backing field for the IsInterface property
        /// </summary>
        private bool _isInterface = false;
        
        /// <summary>
        /// The backing field for the IsAbstract property
        /// </summary>
        private bool _isAbstract = false;
        
        /// <summary>
        /// The backing field for the BaseTypes property
        /// </summary>
        private ObservableAssociationList<IClass> _baseTypes;
        
        /// <summary>
        /// The backing field for the InstanceOf property
        /// </summary>
        private IClass _instanceOf;
        
        /// <summary>
        /// The backing field for the Identifier property
        /// </summary>
        private IAttribute _identifier;
        
        /// <summary>
        /// The backing field for the AttributeConstraints property
        /// </summary>
        private ClassAttributeConstraintsCollection _attributeConstraints;
        
        /// <summary>
        /// The backing field for the ReferenceConstraints property
        /// </summary>
        private ClassReferenceConstraintsCollection _referenceConstraints;
        
        public Class()
        {
            this._baseTypes = new ObservableAssociationList<IClass>();
            this._baseTypes.CollectionChanged += this.BaseTypesCollectionChanged;
            this._attributeConstraints = new ClassAttributeConstraintsCollection(this);
            this._attributeConstraints.CollectionChanged += this.AttributeConstraintsCollectionChanged;
            this._referenceConstraints = new ClassReferenceConstraintsCollection(this);
            this._referenceConstraints.CollectionChanged += this.ReferenceConstraintsCollectionChanged;
        }
        
        /// <summary>
        /// Determines whether this class is an interface
        /// </summary>
        [DefaultValueAttribute(false)]
        [XmlAttributeAttribute(true)]
        public virtual bool IsInterface
        {
            get
            {
                return this._isInterface;
            }
            set
            {
                if ((this._isInterface != value))
                {
                    bool old = this._isInterface;
                    this._isInterface = value;
                    this.OnIsInterfaceChanged(new ValueChangedEventArgs(old, value));
                    this.OnPropertyChanged("IsInterface");
                }
            }
        }
        
        /// <summary>
        /// The IsAbstract property
        /// </summary>
        [DefaultValueAttribute(false)]
        [XmlAttributeAttribute(true)]
        public virtual bool IsAbstract
        {
            get
            {
                return this._isAbstract;
            }
            set
            {
                if ((this._isAbstract != value))
                {
                    bool old = this._isAbstract;
                    this._isAbstract = value;
                    this.OnIsAbstractChanged(new ValueChangedEventArgs(old, value));
                    this.OnPropertyChanged("IsAbstract");
                }
            }
        }
        
        /// <summary>
        /// The BaseTypes property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IClass> BaseTypes
        {
            get
            {
                return this._baseTypes;
            }
        }
        
        /// <summary>
        /// The InstanceOf property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IClass InstanceOf
        {
            get
            {
                return this._instanceOf;
            }
            set
            {
                if ((this._instanceOf != value))
                {
                    IClass old = this._instanceOf;
                    this._instanceOf = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetInstanceOf;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetInstanceOf;
                    }
                    this.OnPropertyChanged("InstanceOf");
                    this.OnInstanceOfChanged(new ValueChangedEventArgs(old, value));
                }
            }
        }
        
        /// <summary>
        /// The Identifier property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IAttribute Identifier
        {
            get
            {
                return this._identifier;
            }
            set
            {
                if ((this._identifier != value))
                {
                    IAttribute old = this._identifier;
                    this._identifier = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetIdentifier;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetIdentifier;
                    }
                    this.OnPropertyChanged("Identifier");
                    this.OnIdentifierChanged(new ValueChangedEventArgs(old, value));
                }
            }
        }
        
        /// <summary>
        /// The AttributeConstraints property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("DeclaringType")]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IAttributeConstraint> AttributeConstraints
        {
            get
            {
                return this._attributeConstraints;
            }
        }
        
        /// <summary>
        /// The ReferenceConstraints property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("DeclaringType")]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IReferenceConstraint> ReferenceConstraints
        {
            get
            {
                return this._referenceConstraints;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ClassChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ClassReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class element that describes the structure of this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                return NMF.Models.Repository.MetaRepository.Instance.ResolveClass("http://nmf.codeplex.com/nmeta/#//Class/");
            }
        }
        
        /// <summary>
        /// Gets fired when the IsInterface property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> IsInterfaceChanged;
        
        /// <summary>
        /// Gets fired when the IsAbstract property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> IsAbstractChanged;
        
        /// <summary>
        /// Gets fired when the InstanceOf property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> InstanceOfChanged;
        
        /// <summary>
        /// Gets fired when the Identifier property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> IdentifierChanged;
        
        /// <summary>
        /// Raises the IsInterfaceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsInterfaceChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.IsInterfaceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsAbstractChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsAbstractChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.IsAbstractChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards change notifications for the BaseTypes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BaseTypesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("BaseTypes", e);
        }
        
        /// <summary>
        /// Raises the InstanceOfChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInstanceOfChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.InstanceOfChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the InstanceOf property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetInstanceOf(object sender, EventArgs eventArgs)
        {
            this.InstanceOf = null;
        }
        
        /// <summary>
        /// Raises the IdentifierChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdentifierChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.IdentifierChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Identifier property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetIdentifier(object sender, EventArgs eventArgs)
        {
            this.Identifier = null;
        }
        
        /// <summary>
        /// Forwards change notifications for the AttributeConstraints property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AttributeConstraintsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("AttributeConstraints", e);
        }
        
        /// <summary>
        /// Forwards change notifications for the ReferenceConstraints property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ReferenceConstraintsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ReferenceConstraints", e);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ISINTERFACE"))
            {
                return this.IsInterface;
            }
            if ((attribute == "ISABSTRACT"))
            {
                return this.IsAbstract;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "BASETYPES"))
            {
                return this._baseTypes;
            }
            if ((feature == "ATTRIBUTECONSTRAINTS"))
            {
                return this._attributeConstraints;
            }
            if ((feature == "REFERENCECONSTRAINTS"))
            {
                return this._referenceConstraints;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "INSTANCEOF"))
            {
                this.InstanceOf = ((IClass)(value));
                return;
            }
            if ((feature == "IDENTIFIER"))
            {
                this.Identifier = ((IAttribute)(value));
                return;
            }
            if ((feature == "ISINTERFACE"))
            {
                this.IsInterface = ((bool)(value));
                return;
            }
            if ((feature == "ISABSTRACT"))
            {
                this.IsAbstract = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "INSTANCEOF"))
            {
                return new InstanceOfProxy(this);
            }
            if ((attribute == "IDENTIFIER"))
            {
                return new IdentifierProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "INSTANCEOF"))
            {
                return new InstanceOfProxy(this);
            }
            if ((reference == "IDENTIFIER"))
            {
                return new IdentifierProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            return ((IClass)(NMF.Models.Repository.MetaRepository.Instance.Resolve("http://nmf.codeplex.com/nmeta/#//Class/")));
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Class class
        /// </summary>
        public class ClassChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Class _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ClassChildrenCollection(Class parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.AttributeConstraints.Count);
                    count = (count + this._parent.ReferenceConstraints.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.AttributeConstraints.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ReferenceConstraints.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.AttributeConstraints.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ReferenceConstraints.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IAttributeConstraint attributeConstraintsCasted = item.As<IAttributeConstraint>();
                if ((attributeConstraintsCasted != null))
                {
                    this._parent.AttributeConstraints.Add(attributeConstraintsCasted);
                }
                IReferenceConstraint referenceConstraintsCasted = item.As<IReferenceConstraint>();
                if ((referenceConstraintsCasted != null))
                {
                    this._parent.ReferenceConstraints.Add(referenceConstraintsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.AttributeConstraints.Clear();
                this._parent.ReferenceConstraints.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.AttributeConstraints.Contains(item))
                {
                    return true;
                }
                if (this._parent.ReferenceConstraints.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> attributeConstraintsEnumerator = this._parent.AttributeConstraints.GetEnumerator();
                try
                {
                    for (
                    ; attributeConstraintsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = attributeConstraintsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    attributeConstraintsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> referenceConstraintsEnumerator = this._parent.ReferenceConstraints.GetEnumerator();
                try
                {
                    for (
                    ; referenceConstraintsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = referenceConstraintsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    referenceConstraintsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IAttributeConstraint attributeConstraintItem = item.As<IAttributeConstraint>();
                if (((attributeConstraintItem != null) 
                            && this._parent.AttributeConstraints.Remove(attributeConstraintItem)))
                {
                    return true;
                }
                IReferenceConstraint referenceConstraintItem = item.As<IReferenceConstraint>();
                if (((referenceConstraintItem != null) 
                            && this._parent.ReferenceConstraints.Remove(referenceConstraintItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.AttributeConstraints).Concat(this._parent.ReferenceConstraints).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Class class
        /// </summary>
        public class ClassReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Class _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ClassReferencedElementsCollection(Class parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.BaseTypes.Count);
                    if ((this._parent.InstanceOf != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Identifier != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.AttributeConstraints.Count);
                    count = (count + this._parent.ReferenceConstraints.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BaseTypes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.InstanceOfChanged += this.PropagateValueChanges;
                this._parent.IdentifierChanged += this.PropagateValueChanges;
                this._parent.AttributeConstraints.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ReferenceConstraints.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BaseTypes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.InstanceOfChanged -= this.PropagateValueChanges;
                this._parent.IdentifierChanged -= this.PropagateValueChanges;
                this._parent.AttributeConstraints.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ReferenceConstraints.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IClass baseTypesCasted = item.As<IClass>();
                if ((baseTypesCasted != null))
                {
                    this._parent.BaseTypes.Add(baseTypesCasted);
                }
                if ((this._parent.InstanceOf == null))
                {
                    IClass instanceOfCasted = item.As<IClass>();
                    if ((instanceOfCasted != null))
                    {
                        this._parent.InstanceOf = instanceOfCasted;
                        return;
                    }
                }
                if ((this._parent.Identifier == null))
                {
                    IAttribute identifierCasted = item.As<IAttribute>();
                    if ((identifierCasted != null))
                    {
                        this._parent.Identifier = identifierCasted;
                        return;
                    }
                }
                IAttributeConstraint attributeConstraintsCasted = item.As<IAttributeConstraint>();
                if ((attributeConstraintsCasted != null))
                {
                    this._parent.AttributeConstraints.Add(attributeConstraintsCasted);
                }
                IReferenceConstraint referenceConstraintsCasted = item.As<IReferenceConstraint>();
                if ((referenceConstraintsCasted != null))
                {
                    this._parent.ReferenceConstraints.Add(referenceConstraintsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.BaseTypes.Clear();
                this._parent.InstanceOf = null;
                this._parent.Identifier = null;
                this._parent.AttributeConstraints.Clear();
                this._parent.ReferenceConstraints.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.BaseTypes.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.InstanceOf))
                {
                    return true;
                }
                if ((item == this._parent.Identifier))
                {
                    return true;
                }
                if (this._parent.AttributeConstraints.Contains(item))
                {
                    return true;
                }
                if (this._parent.ReferenceConstraints.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> baseTypesEnumerator = this._parent.BaseTypes.GetEnumerator();
                try
                {
                    for (
                    ; baseTypesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = baseTypesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    baseTypesEnumerator.Dispose();
                }
                if ((this._parent.InstanceOf != null))
                {
                    array[arrayIndex] = this._parent.InstanceOf;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Identifier != null))
                {
                    array[arrayIndex] = this._parent.Identifier;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> attributeConstraintsEnumerator = this._parent.AttributeConstraints.GetEnumerator();
                try
                {
                    for (
                    ; attributeConstraintsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = attributeConstraintsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    attributeConstraintsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> referenceConstraintsEnumerator = this._parent.ReferenceConstraints.GetEnumerator();
                try
                {
                    for (
                    ; referenceConstraintsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = referenceConstraintsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    referenceConstraintsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IClass classItem = item.As<IClass>();
                if (((classItem != null) 
                            && this._parent.BaseTypes.Remove(classItem)))
                {
                    return true;
                }
                if ((this._parent.InstanceOf == item))
                {
                    this._parent.InstanceOf = null;
                    return true;
                }
                if ((this._parent.Identifier == item))
                {
                    this._parent.Identifier = null;
                    return true;
                }
                IAttributeConstraint attributeConstraintItem = item.As<IAttributeConstraint>();
                if (((attributeConstraintItem != null) 
                            && this._parent.AttributeConstraints.Remove(attributeConstraintItem)))
                {
                    return true;
                }
                IReferenceConstraint referenceConstraintItem = item.As<IReferenceConstraint>();
                if (((referenceConstraintItem != null) 
                            && this._parent.ReferenceConstraints.Remove(referenceConstraintItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.BaseTypes).Concat(this._parent.InstanceOf).Concat(this._parent.Identifier).Concat(this._parent.AttributeConstraints).Concat(this._parent.ReferenceConstraints).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IsInterface property
        /// </summary>
        private sealed class IsInterfaceProxy : ModelPropertyChange<IClass, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsInterfaceProxy(IClass modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsInterface;
                }
                set
                {
                    this.ModelElement.IsInterface = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsInterfaceChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsInterfaceChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IsAbstract property
        /// </summary>
        private sealed class IsAbstractProxy : ModelPropertyChange<IClass, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsAbstractProxy(IClass modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsAbstract;
                }
                set
                {
                    this.ModelElement.IsAbstract = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsAbstractChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsAbstractChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the InstanceOf property
        /// </summary>
        private sealed class InstanceOfProxy : ModelPropertyChange<IClass, IClass>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InstanceOfProxy(IClass modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IClass Value
            {
                get
                {
                    return this.ModelElement.InstanceOf;
                }
                set
                {
                    this.ModelElement.InstanceOf = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InstanceOfChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InstanceOfChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Identifier property
        /// </summary>
        private sealed class IdentifierProxy : ModelPropertyChange<IClass, IAttribute>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdentifierProxy(IClass modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAttribute Value
            {
                get
                {
                    return this.ModelElement.Identifier;
                }
                set
                {
                    this.ModelElement.Identifier = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdentifierChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdentifierChanged -= handler;
            }
        }
    }
}

